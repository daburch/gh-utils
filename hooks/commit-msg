#!/bin/bash

# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.

# Git Commit template enforcement

function main() {
  # Allow user input
  exec < /dev/tty

  COMMIT_MESSAGE_FILE=$1
  COMMIT_MESSAGE="$(cat $COMMIT_MESSAGE_FILE)"

  REGEX='^\[TA[0-9]+\][[:space:]].+$'
  while ! [[ $COMMIT_MESSAGE =~ $REGEX ]]; do
    # Describe the invalid commit message and show expected format
    describe_invalid_commit_message "$COMMIT_MESSAGE"

    # lookup rally tasks for the user
    lookup_rally_tasks

    # List options for solving the issue
    list_options

    # get user input
    local input
    read -p 'select option: ' input

    # resolve the issue with user input
    handle_user_input "$input"
  done

  # confirm success to the user
  echo "Good commit!"

  # close stdin from before
  exec <&-

  # exit with success
  exit 0
}

# Describe the invalid commit message and show expected format
function describe_invalid_commit_message() {
  local message=$1

  printf "\n______\n\n"
  
  printf "Invalid commit message:\n\n"
  printf "\t$message\n\n"

  printf "Please use the following format:\n\n"
  printf "\t[TA123] fix issue with commit messages\n\n"
}

# Write the updated commit message the the COMMIT_MESSAGE_FILE
function update_commit_message() {
  local updated_message=$1

  echo "updated commit message: $updated_message"
  
  local input
  read -p 'confirm [Y/N]: ' input

  if [[ $input == "Y" ]] || [[ $input == "y" ]] ; then
    echo $updated_message > $COMMIT_MESSAGE_FILE
    COMMIT_MESSAGE=$updated_message

    echo "Commit message was updated."
  else
    echo "Commit message was not updated."
  fi
}

# Lookup rally tasks for a given user
function lookup_rally_tasks() {
  # todo: lookup assigned tasks in rally
  RALLY_TASKS=("TA123" "TA5005" "TA10000")

  # Display Rally tasks for the user
  printf "Assigned tasks:\n\n"
  for TASK in ${RALLY_TASKS[@]}; do
    printf "\t[$TASK]\n"
  done
  printf "\n"
}

# Handle user input for handling an invalid commit
function handle_user_input() {
  local input=$1
  if [[ $input == "exit" ]]; then
    handle_exit
  elif [[ $input == "bypass" ]]; then
    handle_bypass
  elif [[ $input =~ ^prepend:[[:blank:]]+TA[0-9]+$ ]]; then
    handle_prepend "$input"
  elif [[ $input =~ ^replace:[[:blank:]]+.*$ ]]; then
    handle_replace "$input"
  else
    printf "unknown selection: $input"
  fi
}

# List user input options when handling an invalid commit
function list_options() {
  printf "Options:\n\n"
  printf "\texit                                    - quit and recommit later\n"
  printf "\tbypass                                  - commit anyways\n"
  printf "\tprepend: TA1234                         - prepend a task ID from above to the commit message and commit\n"
  printf "\treplace: [TA1234] new commit message    - replace the commit message and commit\n\n"
}

# Option - exit
function handle_exit() {
  printf "Commit cancelled.\n"

  # close stdin from before
  exec <&-

  # exit with error
  exit 1
}

# Option - bypass
function handle_bypass() {
  echo "Commit pushed through without valid format.\n"

  # close stdin from before
  exec <&-

  # exit with success
  exit 0
}

# Option - prepend
function handle_prepend() {
  local input=$1
  local task=$(echo $input | cut -d':' -f 2 | xargs)
  local updated_message=$(echo "[$task] $COMMIT_MESSAGE")

  update_commit_message "$updated_message"
}

# Option - replace
function handle_replace() {
  local input=$1
  local updated_message=$(echo $input | cut -d':' -f 2 | xargs)

  update_commit_message "$updated_message"
}

main "$@"