#!/bin/bash

# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.

# Git Commit template enforcement

function lookup_rally_tasks() {
  # todo: lookup assigned tasks in rally
  RALLY_TASKS=("TA123", "TA5005", "TA10000")

  echo "Assigned tasks:"
  for TASK in ${RALLY_TASKS[@]}; do
    echo "  $TASK"
  done
}

MSG_FILE=$1
FILE_CONTENT="$(cat $MSG_FILE)"

# Allows us to read user input below, assigns stdin to keyboard
exec < /dev/tty

while ! [[ $FILE_CONTENT =~ ^\[TA[0-9]+\][[:space:]].+$ ]]; do
  printf "\n______\n\n"
  echo "Invalid commit message: $FILE_CONTENT"
  echo "Please use the following format: $REGEX"
  printf "ex: [TA123] fix issue with commit messages\n\n"

  lookup_rally_tasks

  echo "Options:"
  echo "  exit                                  - quit and recommit later"
  echo "  bypass                                - commit anyways"
  echo "  prepend: TA1234                       - prepend a task ID from above to the commit message and commit"
  echo "  replace: [TA1234] new commit message  - replace the commit message and commit"

  printf "\n"
  read -p 'selection: ' selection
  
  if [[ $selection == "exit" ]]; then
    # reset stdin
    exec <&-
    exit 1
  elif [[ $selection == "bypass" ]]; then
    echo "Ignoring commit message rules"
    # reset stdin
    exec <&-
    exit 0
  elif [[ $selection =~ ^prepend:[[:blank:]]*TA[0-9]+$ ]]; then
    selectedTask=$(echo $selection | cut -d':' -f 2 | xargs)
    updatedMessage=$(echo "[$selectedTask] $FILE_CONTENT")

    echo "updated commit message: $updatedMessage"
    read -p 'confirm[Y/N]: ' selection

    if [[ $selection == "Y" ]] || [[ $selection == "y" ]] ; then
      echo $updatedMessage > $MSG_FILE
      FILE_CONTENT=$updatedMessage
      echo "Commit message was updated."
    else
      echo "Commit message was not updated."
    fi
  elif [[ $selection =~ ^replace:[[:blank:]]*.*$ ]]; then
    updatedMessage=$(echo $selection | cut -d':' -f 2 | xargs)

    echo "updated commit message: $updatedMessage"
    read -p 'confirm[Y/N]: ' selection

    if [[ $selection == "Y" ]] || [[ $selection == "y" ]] ; then
      echo $updatedMessage > $MSG_FILE
      FILE_CONTENT=$updatedMessage
      echo "Commit message was updated."
    else
      echo "Commit message was not updated."
    fi
  else
    printf "unknown selection: $selection"
  fi
done

echo "Good commit!"
exit 0
